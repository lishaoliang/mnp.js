#include "emscripten.h"
#include <SDL.h>
#include <assert.h>

#include <string.h>

#include <sys/socket.h>
#include <netinet/in.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/un.h>

#include <arpa/inet.h>
#include <errno.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>

#include "em_util/em_log.h"
#include "em_util/em_timer.h"
#include "em_fetch/em_fetch.h"

#include <SDL.h>
#include <SDL_ttf.h>

EM_JS(void, two_alerts, (), {
    alert('hai');
alert('bai');
});

static void cb_main(void);

int main() {
    SDL_Init(SDL_INIT_VIDEO);

    uint32_t last = mnp_get_ticks();
    double now = emscripten_get_now();

    emscripten_log(EM_LOG_CONSOLE, "123456 : %f, %d", now, last);

    emscripten_set_canvas_size(480, 320);

    int w = 0, h = 0, f = 0;
    emscripten_get_canvas_size(&w, &h, &f);
    LOG("canvas size,wh=[%d,%d],full=[%d]", w, h, f);



    LOG("log");
    LOG_D("log d");

    //two_alerts();
    
    //emscripten_log(EM_LOG_C_STACK);

    //assert(0);
#if 0
    //struct sockaddr_in addr;
    int res;
    int fd = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);

    //unsigned long nonblocking = 1;
    //fcntl(fd, F_SETFL, O_NONBLOCK);

    struct sockaddr_in addr = { 0 };
    addr.sin_family = PF_INET;
    addr.sin_addr.s_addr = inet_addr("192.168.1.250"); // inet_addr("127.0.0.1");
    addr.sin_port = htons(8000);

    //if (inet_pton(AF_INET, "192.168.1.235", &addr.sin_addr) != 1) {
    //    perror("inet_pton failed");
    //    finish(EXIT_FAILURE);
    //}
    res = connect(fd, (struct sockaddr *)&addr, sizeof(addr));
#endif

#if 0
    emscripten_async_wget_data("http://192.168.1.250:8000/aaa.txt", "index.html", NULL, NULL);
    emscripten_async_wget_data("http://192.168.1.250/", "index2.html", NULL, NULL);
#endif

    //mnp_sleep(6000);


    SDL_Surface *screen = SDL_SetVideoMode(480, 320, 32, SDL_HWSURFACE);

    TTF_Init();
    TTF_Font *font = TTF_OpenFont("Arial", 32);

    SDL_Color color = { 0xff, 0x99, 0x00, 0xff };
    SDL_Surface *text = TTF_RenderText_Solid(font, "Play", color);
    SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 255, 0, 0));
    SDL_BlitSurface(text, NULL, screen, NULL);

    emscripten_set_main_loop(cb_main, 30, 0);

    //SDL_Quit();
    return 0;
}

static void cb_main(void)
{
    //LOG("cb main");
}
